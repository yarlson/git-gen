#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

JIRA_TICKET_REGEX='[A-Z]+-[0-9]+'

if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo -e "${RED}ERROR: ANTHROPIC_API_KEY is not set${NC}" >&2
    exit 1
fi

# Check if in a git repository
if ! REPO_DIR=$(git rev-parse --show-toplevel 2>/dev/null); then
    echo -e "${RED}Not a git repository.${NC}"
    exit 1
fi

cd "$REPO_DIR" || exit 1

BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Extract Jira ticket ID from branch name
JIRA_TICKET=$(echo "${BRANCH_NAME##*/}" | grep -oE "$JIRA_TICKET_REGEX")

# Add all changes to the index
git add .

# Get list of changed files
ADDED_FILES=$(git diff --cached --name-only --diff-filter=A)
DELETED_FILES=$(git diff --cached --name-only --diff-filter=D)
MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M)

# Get current diff
DIFF=$(git diff --cached)

# Get last 10 commit messages
LAST_10_COMMITS=$(git log -n 10 --pretty=format:"%s")

generate_commit_message() {
    # First escape all our variables using jq
    local escaped_commits=$(echo "$LAST_10_COMMITS" | jq -R -s .)
    local escaped_added=$(echo "$ADDED_FILES" | jq -R -s .)
    local escaped_deleted=$(echo "$DELETED_FILES" | jq -R -s .)
    local escaped_modified=$(echo "$MODIFIED_FILES" | jq -R -s .)
    local escaped_diff=$(echo "$DIFF" | jq -R -s .)

    # Create the system message with commit guidelines
    local system_message=$(cat << EOT
You are a commit message generator that produces clear, specific, and insightful messages that capture both changes and their impact. Follow these guidelines:

1. Core Message Structure:
   - Type and scope: feat(auth), fix(api), refactor(core)
   - Summary: What SPECIFICALLY changed
   - Impact: How it improves the system

2. Be Explicit About Changes:
   - For refactors: "refactor(auth): extract JWT logic into dedicated service for better testability"
   - For features: "feat(api): add request throttling with sliding window to handle 10k/min load"
   - For fixes: "fix(cache): prevent memory leak by implementing LRU eviction"

3. Always Include:
   - The specific technical change made (e.g., what was added/modified/removed)
   - The direct outcome or improvement (e.g., better performance, cleaner code, fixed issue)
   - Quantifiable improvements when relevant (e.g., 50% faster, reduced complexity)

4. Real Examples:
   - Bad: "refactor(api): improve code"
   - Good: "refactor(api): split monolithic handler into modular middleware chain"
   - Bad: "feat(ui): add caching"
   - Good: "feat(ui): implement Redis caching layer reducing load times by 40%"
   - Bad: "update error handling"
   - Good: "fix(errors): standardize error responses with detailed codes and messages"

5. Message Format:
   - Keep under 72 chars if possible
   - No emojis or file lists
   - Use imperative mood

Focus on communicating both the change and its value. Make it clear what changed and why it matters.

Respond with only the commit message, no explanations or additional text.
EOT
)
    local escaped_system=$(echo "$system_message" | jq -R -s .)

    # Create the user message with the context and changes
    local user_message=$(cat << EOT
<context>
  <previousCommits>
${escaped_commits}
  </previousCommits>

  <changes>
    <addedFiles>
${escaped_added}
    </addedFiles>

    <deletedFiles>
${escaped_deleted}
    </deletedFiles>

    <modifiedFiles>
${escaped_modified}
    </modifiedFiles>

    <diff>
${escaped_diff}
    </diff>
  </changes>
</context>

Based on the context above, generate a commit message that follows the guidelines. Maintain consistency with previous commit messages where appropriate.
EOT
)
    local escaped_user=$(echo "$user_message" | jq -R -s .)

    # Use heredoc for the payload with the escaped content and system message
    local response=$(curl -s -X POST \
        https://api.anthropic.com/v1/messages \
        --header "x-api-key: $ANTHROPIC_API_KEY" \
        --header "anthropic-version: 2023-06-01" \
        --header "content-type: application/json" \
        -d @- << EOF
{
    "model": "claude-3-5-sonnet-20240620",
    "max_tokens": 1024,
    "system": ${escaped_system},
    "messages": [
        {
            "role": "user",
            "content": ${escaped_user}
        }
    ]
}
EOF
)
    # Check if the response contains an error
    if echo "$response" | jq -e 'has("error")' > /dev/null; then
        echo -e "${RED}API Error: $(echo "$response" | jq -r '.error.message')${NC}" >&2
        return 1
    fi

    # Extract and verify the commit message
    local commit_message=$(echo "$response" | jq -r '.content[0].text // empty')
    if [ -z "$commit_message" ]; then
        echo -e "${RED}Error: Empty commit message in response${NC}" >&2
        return 1
    fi

    echo "$commit_message"
}

while true; do
    MESSAGE=$(generate_commit_message)

    if [ -z "$MESSAGE" ]; then
        echo -e "${RED}Failed to generate commit message${NC}" >&2
        exit 1
    fi

    # Prepend Jira ticket ID if present
    [ -n "$JIRA_TICKET" ] && MESSAGE="$JIRA_TICKET $MESSAGE"

    echo -e "${YELLOW}Generated commit message: ${NC}$MESSAGE"
    echo -ne "${PURPLE}Is this commit message ok? (y/n/e for edit): ${NC}"
    read -r CONFIRMATION

    case $CONFIRMATION in
        y)
            break
            ;;
        n)
            continue
            ;;
        e)
            echo "$MESSAGE" > temp_commit_message.txt
            ${EDITOR:-vim} temp_commit_message.txt
            MESSAGE=$(<temp_commit_message.txt)
            rm temp_commit_message.txt
            break
            ;;
    esac
done

# Commit changes with the generated message
git commit -m "$MESSAGE"
echo -e "${GREEN}Changes committed${NC}"
