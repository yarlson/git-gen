#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

JIRA_TICKET_REGEX='[A-Z]+-[0-9]+'

# Check if in a git repository
if ! REPO_DIR=$(git rev-parse --show-toplevel 2>/dev/null); then
    echo -e "${RED}Not a git repository.${NC}"
    exit 1
fi

cd "$REPO_DIR" || exit 1

BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Extract Jira ticket ID from branch name
JIRA_TICKET=$(echo "${BRANCH_NAME##*/}" | grep -oE "$JIRA_TICKET_REGEX")

# Add all changes to the index
git add .

# Get list of changed files
ADDED_FILES=$(git diff --cached --name-only --diff-filter=A)
DELETED_FILES=$(git diff --cached --name-only --diff-filter=D)
MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M)

# Get current diff
DIFF=$(git diff --cached)

# Get last 10 commit messages
LAST_10_COMMITS=$(git log -n 10 --pretty=format:"%s")

generate_commit_message() {
    local payload
    payload=$(
        jq -n \
            --arg diff "$DIFF" \
            --arg addedFiles "$ADDED_FILES" \
            --arg deletedFiles "$DELETED_FILES" \
            --arg modifiedFiles "$MODIFIED_FILES" \
            --arg lastCommits "$LAST_10_COMMITS" \
            '{
                "model": "claude-3-5-sonnet-20240620",
                "max_tokens": 1024,
                "messages": [
                    {
                        "role": "user",
                        "content": (
                            "You are tasked with generating a concise and meaningful commit message based on code changes. Follow these guidelines to create an effective commit message:\n\n" +
                            "1. Use imperative mood (e.g., \"Add feature\" instead of \"Added feature\")\n" +
                            "2. Use Conventional Commits 1.0.0\n" +
                            "3. Keep the message short and to the point\n" +
                            "4. Do not include a list of added, updated, or deleted files\n" +
                            "5. Do not use emojis\n" +
                            "6. For refactor commits:\n" +
                            "   - Be more technical and include some implementation details\n" +
                            "   - Mention specific components, functions, or modules being refactored\n" +
                            "   - Briefly describe the nature of the refactoring (e.g., \"Extract method\", \"Rename variable\", \"Optimize algorithm\")\n" +
                            "7. For other types of commits:\n" +
                            "   - Focus on describing the business logic, not implementation details\n" +
                            "   - Emphasize the essence of the changes\n\n" +
                            "First, review the following previous commit messages for consistency:\n" +
                            "<lastCommits>\n" + $lastCommits + "\n" +
                            "</lastCommits>\n\n" +
                            "Now, examine the lists of files that have been affected:\n\n" +
                            "Added files:\n" +
                            "<addedFiles>\n" + $addedFiles + "\n" +
                            "</addedFiles>\n\n" +
                            "Deleted files:\n" +
                            "<deletedFiles>\n" + $deletedFiles + "\n" +
                            "</deletedFiles>\n\n" +
                            "Modified files:\n" +
                            "<modifiedFiles>\n" + $modifiedFiles + "\n" +
                            "</modifiedFiles>\n\n" +
                            "Finally, analyze the diff of the changes:\n\n" +
                            "<diff>\n" + $diff + "\n" +
                            "</diff>\n\n" +
                            "Based on this information, generate a short commit message that captures the essence of the changes. For refactor commits, include more technical details and specific components being refactored. For other types of commits, focus on the business logic and maintain consistency with the previous commit messages. Remember to use imperative mood.\n\n" +
                            "Provide only the commit message. Do not include any explanation or description of the commit message itself."
                        )
                    }
                ]
            }'
    )

    curl -s -X POST \
        https://api.anthropic.com/v1/messages \
        --header "x-api-key: $ANTHROPIC_API_KEY" \
        --header "anthropic-version: 2023-06-01" \
        --header "content-type: application/json" \
        --data "$payload" | jq -r '.content[0].text'
}

while true; do
    MESSAGE=$(generate_commit_message)
    if [ -z "$MESSAGE" ]; then
        echo -e "${RED}Failed to generate commit message${NC}"
        exit 1
    fi

    # Prepend Jira ticket ID if present
    [ -n "$JIRA_TICKET" ] && MESSAGE="$JIRA_TICKET $MESSAGE"

    echo -e "${YELLOW}Generated commit message: ${NC}$MESSAGE"
    echo -ne "${PURPLE}Is this commit message ok? (y/n/e for edit): ${NC}"
    read -r CONFIRMATION

    case $CONFIRMATION in
        y) break ;;
        n) continue ;;
        e)
            echo "$MESSAGE" > temp_commit_message.txt
            ${EDITOR:-vim} temp_commit_message.txt
            MESSAGE=$(<temp_commit_message.txt)
            rm temp_commit_message.txt
            break
            ;;
    esac
done

# Commit changes with the generated message
git commit -m "$MESSAGE"
echo -e "${GREEN}Changes committed${NC}"
